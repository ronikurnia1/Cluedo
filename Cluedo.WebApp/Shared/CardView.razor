
<div class="@Size">
    <div class="game-card" draggable="true" @ondragstart="DragStart">
        @if (DropZone)
        {
            <span class="top-right oi oi-circle-x"
              aria-hidden="true" @onclick="Undropped"></span>
        }

        @if (PlayableCard)
        {
            <img src="@Image" alt="Avatar" @ondblclick="ToggleCard"
             class="@Card?.EliminatedClass @Card?.ClueCardClass"
             style="width:100%" />
        }
        else
        {
            <img src="@Image" alt="Avatar" style="width:100%" />
        }
    </div>
</div>

@code {
    [Parameter]
    public PlayingCard? Card { get; set; }
    [Parameter]
    public string Size { get; set; } = "col-2";
    [Parameter]
    public EventCallback<PlayingCard> OnDragStart { get; set; }
    [Parameter]
    public EventCallback<PlayingCard> OnCardChange { get; set; }
    [Parameter]
    public EventCallback<PlayingCard> OnUndropped { get; set; }

    [Parameter]
    public bool DropZone { get; set; } = false;
    [Parameter]
    public bool PlayableCard { get; set; } = true;

    private string Image => $"img/{Card?.No}.svg";

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
    }

    private async Task DragStart()
    {
        await OnDragStart.InvokeAsync(Card);
    }

    private async Task Undropped()
    {
        await OnUndropped.InvokeAsync(Card);
    }

    private async Task ToggleCard()
    {
        Card?.Eliminate(!Card.IsEliminated);
        await OnCardChange.InvokeAsync(Card);
    }
}
