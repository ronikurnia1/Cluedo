@page "/games/{gameId}/players/{playerId}"
@inject IGameService GameService
@implements IDisposable
@inject IToaster Toaster
@layout GameLayout
@inject NavigationManager NavigationManager

<div class="d-flex flex-row h-100 pe-1">
    <div class="scrolling-left ps-3 pe-3 pt-3 pb-3 left-flex">
        <div class="row g-0 pb-4">
            <h5>Your cards</h5>
            <div class="col-12 container-fluid">
                <div class="row g-2 flex-row-reverse">
                    @foreach (PlayingCard card in PlayingCards.Where(c => c.PlayingType == PlayingTypes.OnHand))
                    {
                        <CardView Card="@card" Size="col" OnCardChange="@CardChange" OnDragStart="@DraggingCard" />
                    }
                    <div class="col"></div>
                </div>
            </div>
        </div>

        <div class="row g-0 pb-2">
            <h5>Suspect cards</h5>
            <div class="col-12 container-fluid">
                <div class="row g-2 flex-row-reverse">
                    @foreach (PlayingCard card in PlayingCards
                    .Where(c => c.PlayingType == PlayingTypes.Suspect)
                    .OrderBy(c => c.CardType).Skip(0).Take(5))
                    {
                        <CardView Card="@card" Size="col" OnCardChange="@CardChange"
                              OnDragStart="@DraggingCard" />
                    }
                </div>
            </div>
        </div>

        <div class="row g-0 pb-2">
            <div class="col-12 container-fluid">
                <div class="row g-2 flex-row-reverse">
                    @foreach (PlayingCard card in PlayingCards
                    .Where(c => c.PlayingType == PlayingTypes.Suspect)
                    .OrderBy(c => c.CardType).Skip(5).Take(5))
                    {
                        <CardView Card="@card" Size="col" OnCardChange="@CardChange"
                              OnDragStart="@DraggingCard" />
                    }
                </div>
            </div>
        </div>

        <div class="row g-0 pb-2">
            <div class="col-12 container-fluid">
                <div class="row g-2 flex-row-reverse">
                    @foreach (PlayingCard card in PlayingCards
                    .Where(c => c.PlayingType == PlayingTypes.Suspect)
                    .OrderBy(c => c.CardType).Skip(10).Take(5))
                    {
                        <CardView Card="@card" Size="col" OnCardChange="@CardChange"
                              OnDragStart="@DraggingCard" />
                    }
                </div>
            </div>
        </div>
    </div>
    <div class="center-flex ps-2 pe-2 pt-3">
        <div class="col-12 container-fluid upper-row ps-2 pe-2">
            <h5>Dropped zone</h5>
            <div class="row pb-3 g-2 drop-zone" ondragover="event.preventDefault();"
                 @ondrop="DroppedCard" ondragstart="event.dataTransfer.setData('', event.target.id);">
                @foreach (PlayingCard card in DroppedCards)
                {
                    <CardView Card="card" OnUndropped="@OnUndropped" DropZone=true Size="col-4" OnCardChange="@CardChange" />
                }
            </div>
            <div class="row pt-1">
                <div class="col p-2">
                    <div class="d-grid gap-1">
                        <button type="button" class="btn btn-light btn-sm" disabled="@(!CanAskForClue)" @onclick="AskForClue">
                            Ask for clue
                        </button>
                        <button type="button" class="btn btn-light btn-sm" disabled="@(!CanHaveNoClue)" @onclick="HaveNoClue">
                            Have no clue
                        </button>
                        <button type="button" class="btn btn-warning btn-sm" @onclick="GoToHome">
                            Home
                        </button>
                    </div>
                </div>
                <div class="col p-2">
                    <div class="d-grid gap-1">
                        <button type="button" class="btn btn-light btn-sm" disabled="@(!CanGiveClue)" @onclick="GiveClue">
                            Give a clue
                        </button>
                        <button type="button" class="btn btn-light btn-sm" disabled="@(!CanConfirmClue)" @onclick="ConfirmClue">
                            Confirm a clue
                        </button>
                        <button type="button" class="btn btn-danger btn-sm" disabled="@(!CanAccuse)" @onclick="Accuse">
                            Accuse
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="row g-2 d-flex ps-2 pe-2 pb-3 lower-row">
            <div class="scrolling-middle flex-fill">
                <ul>
                    @if (player != null && player.GameInfo != null)
                    {
                        int index = 0;
                        foreach (string item in player.GameInfo.Reverse())
                        {
                            if (index == 0)
                            {
                                <li style="color: darkblue"><b>@item</b></li>
                            }
                            else
                            {
                                <li>@item</li>
                            }
                            index += 1;
                        }
                    }
                </ul>
            </div>
        </div>
    </div>
    <div class="right-flex ps-2 pe-2 pt-3">
        <div class="col-12 container-fluid ps-2 pe-2">
            <h5>Cards in question</h5>
            <div class="row pb-3 g-2 drop-zone">
                @if (game != null)
                {
                    foreach (PlayingCard card in game.CurrentQuestionCards.ToList())
                    {
                        <CardView Size="col-4" Card="card" PlayableCard=false />
                    }
                }
            </div>
            <div class="row">
                <div class="p-3"></div>
            </div>

            <h5>Your accuse</h5>
            <div class="row pb-3 g-2 drop-zone">
                @foreach (PlayingCard card in AccuseCards.OrderBy(c => c.No))
                {
                    <CardView Size="col" Card="card" PlayableCard=false />
                }
            </div>
            <div class="row">
                <div class="p-3"></div>
            </div>
            <h5>Cards to reveal</h5>
            <div class="row pb-3 g-2 drop-zone">
                @if (game != null)
                {
                    if (player?.State == PlayingStates.Lose
                    || player?.State == PlayingStates.Win)
                    {
                        foreach (Card card in game.SecretEnvelope.OrderBy(c => c.No).ToList())
                        {
                            <CardView Size="col" PlayableCard=false Card="new PlayingCard(card, PlayingTypes.OnHand)" />
                        }
                    }
                    else
                    {
                        foreach (Card card in game.SuspectCovers.ToList())
                        {
                            <CardView Size="col" PlayableCard=false Card="new PlayingCard(card, PlayingTypes.OnHand)" />
                        }
                    }
                }
            </div>
        </div>
    </div>
</div>


@code {

    [Parameter]
    public string GameId { get; set; } = string.Empty;
    [Parameter]
    public string PlayerId { get; set; } = string.Empty;

    private Player? player;
    private Game? game;
    private System.Timers.Timer timer = new(7000);

    private PlayingCard? draggedCard { get; set; } = null;
    private List<PlayingCard> PlayingCards { get; set; } = new();
    private List<PlayingCard> DroppedCards { get; set; } = new();

    private List<PlayingCard> AccuseCards { get; set; } = new();

    private bool CanAskForClue =>
    DroppedCards.Count() == 3
    && player?.State == PlayingStates.AskingForClue;

    private bool CanGiveClue => player?.State == PlayingStates.GivingClue
    && DroppedCards.Count() == 1;

    private bool CanHaveNoClue => player?.State == PlayingStates.GivingClue
    && PlayingCards.Count(c => c.IsClueCard) == 0;

    private bool CanConfirmClue => player?.State == PlayingStates.ConfirmingClue;

    private bool CanAccuse => player?.State == PlayingStates.AskingForClue
    && DroppedCards.Count() == 3;

    private void DraggingCard(PlayingCard card)
    {
        draggedCard = card;
    }

    private async Task CardChange()
    {
        await InvokeAsync(StateHasChanged);
    }

    private async Task DroppedCard()
    {
        if (draggedCard != null
            && DroppedCards.Count() < 3)
        {
            DroppedCards.Add(new PlayingCard(draggedCard, PlayingTypes.OnHand));
            draggedCard = null;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task OnUndropped(PlayingCard card)
    {
        DroppedCards.Remove(card);
        await Task.CompletedTask;
    }

    private async Task AskForClue()
    {
        player?.AskClue(DroppedCards);
        DroppedCards.Clear();
        await Task.CompletedTask;
    }

    private async Task GiveClue()
    {
        var clueCard = DroppedCards.First();
        player?.GiveClue(clueCard);

        DroppedCards.Clear();

        await Task.CompletedTask;
    }

    private async Task HaveNoClue()
    {
        player?.GiveNoClue();
        await Task.CompletedTask;
    }

    private async Task ConfirmClue()
    {
        player?.ConfirmClue();
        await Task.CompletedTask;
    }

    private async Task Accuse()
    {
        player?.Accuse(DroppedCards);
        AccuseCards.AddRange(DroppedCards);
        DroppedCards.Clear();
        await Task.CompletedTask;
    }

    private async Task GoToHome()
    {
        if (player?.State == PlayingStates.Win && game != null)
        {
            // Terminate the game
            GameService.DemolishGame(game.Id);
        }
        NavigationManager.NavigateTo("/");
        await Task.CompletedTask;
    }


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        game = GameService.GetGame(GameId);
        if (game != null)
        {
            player = game.Players.First(p => p.Id == PlayerId);

            PlayingCards = player.Cards.ToList();
            game.StateChangedEvent += StateChangedHandler;
        }
    }

    public void Dispose()
    {
        if (game != null)
        {
            game.StateChangedEvent -= StateChangedHandler;
        }
    }

    private void StateChangedHandler(object? sender, EventArgs e)
    {
        InvokeAsync(StateHasChanged);
    }

}
