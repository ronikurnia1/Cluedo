@page "/games/{gameId}"
@inject IGameService GameService
@inject ILocalStorageService LocalStorage
@inject NavigationManager navigation
@implements IDisposable

<div class="content">
    <div class="row g-2">
        <div class="col-12">
            <h3>Game: @GameId</h3>
            <ul class="nav flex-column">
                @if (game != null)
                {
                    foreach (Player player in game.Players)
                    {
                        <li class="nav-item">
                            @if (playerId == player.Id)
                            {
                                string link = $"games/{GameId}/players/{player.Id}";
                                <a class="nav-link" href="@link" target="_self">
                                    <span class="oi oi-person" aria-hidden="true"></span> @player.Name (you)
                                </a>
                            }
                            else
                            {
                                string link = $"games/{GameId}";
                                <a class="nav-link" href="@link" target="_self">
                                    <span class="oi oi-person" aria-hidden="true"></span> @player.Name
                                </a>
                            }
                        </li>
                    }
                }
            </ul>
            @if (game != null && game.Players.Count < 4
            && game.Players.Count(p => p.Id == playerId) == 0)
            {
                <div class="content">
                    <EditForm Model="model" OnValidSubmit="Join" class="form">
                        <div class="form-group">
                            <InputText placeholder="Player name" @bind-Value="model.Name" class="form-control" />
                        </div>
                        <DataAnnotationsValidator />
                        <ValidationSummary />
                        <div class="form-group pt-3">
                            <button type="submit" class="btn btn-primary">Join the game</button>
                        </div>
                    </EditForm>
                </div>
            }
        </div>
    </div>
    <div class="row g-2">
        <div class="col-12 pt-3">
            @if (game != null && game.Players.Count > 0
            && game.Players.Count < 4
            && game.Players.Count(p => p.Id == playerId) == 1)
            {
                <button type="button" @onclick="PlayWithMachine" class="btn btn-primary">Play with machine(s)</button>
            }
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string GameId { get; set; } = string.Empty;

    private RegistrationModel model = new RegistrationModel();

    private Game? game;
    private string playerId = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        game = GameService.GetGame(GameId);

        //List<string> players = new() { "Player1", "Player2", "Player3", "Player4" };
        //players.ForEach(i => game?.RegisterPlayer(i));
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        playerId = await LocalStorage.GetItemAsync<string>("PlayerId");
        await InvokeAsync(StateHasChanged);
    }


    private async Task Join()
    {
        if (game != null)
        {
            string playerId = game.RegisterPlayer(model.Name);
            await LocalStorage.SetItemAsync("PlayerId", playerId);
            await LocalStorage.SetItemAsync("GameId", GameId);
            model.Name = string.Empty;

            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task PlayWithMachine()
    {
        if (game != null)
        {
            game.RunWithMachine();
            navigation.NavigateTo($"/games/{GameId}/players/{playerId}");
        }
        await Task.CompletedTask;
    }


    public void Dispose()
    {

    }
}
